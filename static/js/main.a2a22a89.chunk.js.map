{"version":3,"sources":["common/AddItemForm.module.css","components/toDoList.module.css","common/AddItemForm.tsx","components/Todolist.tsx","components/TaskComments.tsx","state/stateReducer.ts","repository/repository.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","flag","setFlag","color","setColor","addItem","trim","flagHandler","className","styles","inputStyle","background","onClick","style","backgroundColor","height","width","content","onAccept","onCancel","onChangeComplete","hex","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","ctrlKey","label","placeholder","helperText","IconButton","AddBox","Todolist","addTask","useCallback","task","tasks","map","t","commentsForTask","comments","id","key","numberOfCom","length","removeTask","Delete","Button","selectedTaskId","href","showCommentsOfTask","Comments","addComment","taskId","comment","padding","commentId","text","stateReducer","state","action","type","commentsCopy","filter","v1","taskComments","console","Error","addCommentAC","repository","_keys","saveTasks","localStorage","setItem","JSON","stringify","saveComments","getComments","data","getItem","parse","getTasks","columnPaperStyle","RestoreAppContainer","isInitialized","setIsInitialized","setTasks","setComments","useEffect","Promise","all","then","App","useReducer","getInitialState","dispatch","selectedComments","removeTaskAC","addTaskAC","commentText","AppBar","position","Toolbar","Typography","Container","maxWidth","Grid","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a2a22a89.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputStyle\":\"AddItemForm_inputStyle__2-SVy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberOfCom\":\"toDoList_numberOfCom__31_AO\",\"inputStyle\":\"toDoList_inputStyle__1GxOe\",\"task\":\"toDoList_task__1z39h\",\"comment\":\"toDoList_comment__1ssMu\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {PhotoshopPicker} from \"react-color\";\r\nimport styles from './AddItemForm.module.css'\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, color?: string) => void\r\n    placeholder: string,\r\n    background?: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [flag, setFlag] = useState(false);\r\n    let [color, setColor] = useState<string>('#000');\r\n\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title, color);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n\r\n        if (e.charCode === 13 && e.ctrlKey) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const colorChangeHandler = (color: any) => {\r\n        setColor(color.hex)\r\n\r\n    }\r\n\r\n\r\n    const flagHandler = () => {\r\n        setFlag(!flag)\r\n    }\r\n\r\n    return <div>\r\n        <div className={styles.inputStyle}>\r\n            {props.background ?\r\n                <div\r\n                    onClick={flagHandler}\r\n                    style={{backgroundColor: color, height: '30px', width: '30px', content: ''}}/> : null}\r\n\r\n            {flag ?\r\n                < PhotoshopPicker onAccept={flagHandler} onCancel={flagHandler} onChangeComplete={colorChangeHandler}\r\n                                  color={color}/> : null}\r\n            <TextField\r\n                style ={{width: '350px'}}\r\n                variant=\"outlined\"\r\n                       error={!!error}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       label={props.placeholder}\r\n                       helperText={error}\r\n            />\r\n\r\n            <IconButton color=\"primary\" onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {AddItemForm} from '../common/AddItemForm'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport styles from './toDoList.module.css'\r\nimport {CommentsStateType, TaskType} from '../state/entitiesTypes'\r\n\r\ntype PropsType = {\r\n    comments: CommentsStateType,\r\n    tasks: Array<TaskType>\r\n    selectedTaskId: string | null\r\n    removeTask: (taskId: string) => void\r\n    showCommentsOfTask: (taskId: string) => void\r\n    addTask: (title: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title)\r\n    }, [props.addTask]);\r\n\r\n    return <div>\r\n        <AddItemForm addItem={addTask} placeholder={'Type task here'}/>\r\n        <div className={styles.task}>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id)\r\n                    const showComments = () => {\r\n                        props.showCommentsOfTask(t.id)\r\n                    }\r\n\r\n                    let commentsForTask = props.comments[t.id]\r\n                    return <div className={styles.inputStyle} key={t.id}>\r\n                        <span>{t.title}</span>\r\n                        {\r\n                            commentsForTask ?\r\n                                <span className={styles.numberOfCom}>{commentsForTask.length}</span> :\r\n                                <span className={styles.numberOfCom}>0</span>\r\n                        }\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                        {\r\n                            <Button variant={t.id === props.selectedTaskId ? 'contained' : 'outlined'}\r\n                                    color={'primary'}\r\n                                    href=\"#outlined-buttons\" onClick={showComments}>\r\n                                Show Comments\r\n                            </Button>\r\n\r\n                        }\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useState} from 'react'\r\nimport {AddItemForm} from '../common/AddItemForm'\r\nimport styles from './toDoList.module.css'\r\nimport {TaskType} from '../state/entitiesTypes'\r\n\r\n\r\nexport type CommentType = {\r\n    commentId: string,\r\n    text: string,\r\n    background: string\r\n}\r\n\r\ntype PropsType = {\r\n    comments: Array<CommentType>\r\n    taskId: string | null\r\n    addComment: (taskId: string, commentText: string, color?: string) => void\r\n}\r\n\r\nexport const Comments = React.memo(function (props: PropsType) {\r\n    let [flag, setFlag] = useState(false);\r\n\r\n    const addComment = useCallback((title: string, color?: string) => {\r\n        if (props.taskId !== null) {\r\n            props.addComment(props.taskId, title, color)\r\n        }\r\n    }, [props.taskId, props.addComment]);\r\n\r\n    const flagHandler = useCallback(() => {\r\n        setFlag(!flag)\r\n    }, [flag])\r\n\r\n    return <div>\r\n\r\n        {props.comments ?\r\n            props.comments.map(comment => {\r\n                    return <div style={{padding: '10px'}} key={comment.commentId}>\r\n                        <div className={styles.comment}>\r\n                            <div\r\n                                onClick={flagHandler}\r\n                                style={{backgroundColor: comment.background, height: '20px', width: '20px', content: ''}}/>\r\n                            <div>{comment.text}</div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            ) : null\r\n        }\r\n        <AddItemForm addItem={addComment} placeholder={'Type comment here'} background={'#000'}/>\r\n    </div>\r\n})\r\n","import {CommentsStateType, TaskType} from './entitiesTypes'\r\nimport {v1} from 'uuid'\r\n\r\nexport const getInitialState = (tasks: Array<TaskType>, comments: CommentsStateType) => {\r\n    return {\r\n        tasks: tasks,\r\n        comments: comments,\r\n        selectedTaskId: null as string | null\r\n    }\r\n}\r\n\r\nexport const initialState = {\r\n    tasks: [] as Array<TaskType>,\r\n    comments: {} as CommentsStateType,\r\n    selectedTaskId: null as string | null\r\n}\r\n\r\nexport type AppStateType = typeof initialState\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof addCommentAC>\r\n    | ReturnType<typeof setSelectedTask>\r\n\r\nexport const stateReducer = (state: AppStateType, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case 'TODOLIST/STATE/REMOVE-TASK':\r\n            const commentsCopy = {...state.comments}\r\n            delete commentsCopy[action.id]\r\n\r\n            return {\r\n                ...state,\r\n                selectedTaskId: state.selectedTaskId === action.id ? null : state.selectedTaskId,\r\n                comments: commentsCopy,\r\n                tasks: state.tasks.filter(t => t.id !== action.id)\r\n            }\r\n        case 'TODOLIST/STATE/ADD-TASK':\r\n            const taskId = v1()\r\n            return {\r\n                ...state,\r\n                comments: {...state.comments, [taskId]: []},\r\n                tasks: [\r\n                    ...state.tasks,\r\n                    {id: taskId, title: action.title}\r\n                ]\r\n            }\r\n        case 'TODOLIST/STATE/ADD-COMMENT':\r\n            let comment = {commentId: v1(), text: action.text, background: action.color}\r\n            let taskComments = state.comments[action.taskId]\r\n            return {\r\n                ...state,\r\n                comments: {\r\n                    ...state.comments,\r\n                    [action.taskId]: [...taskComments, comment]\r\n                }\r\n            }\r\n        case 'TODOLIST/STATE/SET-SELECTED-TASK':\r\n            return {\r\n                ...state,\r\n                selectedTaskId: action.taskId\r\n            }\r\n        default: {\r\n            console.error(new Error('Action is not supported'))\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (id: string) => ({type: 'TODOLIST/STATE/REMOVE-TASK', id} as const)\r\nexport const addTaskAC = (title: string) => ({type: 'TODOLIST/STATE/ADD-TASK', title} as const)\r\nexport const addCommentAC = (taskId: string, text: string, color: string) => ({\r\n    type: 'TODOLIST/STATE/ADD-COMMENT',\r\n    taskId,\r\n    color,\r\n    text\r\n} as const)\r\nexport const setSelectedTask = (taskId: string) => ({\r\n    type: 'TODOLIST/STATE/SET-SELECTED-TASK', taskId\r\n} as const)\r\n","import {CommentsStateType, TaskType} from '../state/entitiesTypes'\r\n\r\nexport const repository = {\r\n    _keys: {\r\n        tasks: 'todolist-tasks',\r\n        comments: 'comments-tasks'\r\n    },\r\n    async saveTasks(tasks: Array<TaskType>) {\r\n        localStorage.setItem(this._keys.tasks, JSON.stringify(tasks))\r\n    },\r\n    async saveComments(comments: CommentsStateType) {\r\n        localStorage.setItem(this._keys.comments, JSON.stringify(comments))\r\n    },\r\n    async getComments(): Promise<CommentsStateType> {\r\n        const data = localStorage.getItem(this._keys.comments)\r\n        if (data) {\r\n            return JSON.parse(data)\r\n        } else {\r\n            return {}\r\n        }\r\n    },\r\n    async getTasks(): Promise<Array<TaskType>> {\r\n        const data = localStorage.getItem(this._keys.tasks)\r\n        if (data) {\r\n            return JSON.parse(data)\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n}\r\n","import React, {useCallback, useEffect, useReducer, useState} from 'react'\nimport './App.css'\nimport {Todolist} from './components/Todolist'\nimport {AppBar, Container, Grid, Paper, Toolbar, Typography} from '@material-ui/core'\nimport {Comments} from './components/TaskComments'\nimport {\n    addCommentAC,\n    addTaskAC,\n    getInitialState,\n    removeTaskAC,\n    setSelectedTask,\n    stateReducer\n} from './state/stateReducer'\nimport {repository} from './repository/repository'\nimport {CommentsStateType, TaskType} from './state/entitiesTypes'\n\ntype AppPropsType = {\n    comments: CommentsStateType,\n    tasks: Array<TaskType>\n}\n\n\nlet columnPaperStyle = {padding: '10px', width: '450px'}\n\nexport function RestoreAppContainer() {\n    const [isInitialized, setIsInitialized] = useState(false);\n    const [tasks, setTasks] = useState<Array<TaskType>>([]);\n    const [comments, setComments] = useState<CommentsStateType>({});\n\n    useEffect(() => {\n        Promise.all([\n            repository.getTasks(),\n            repository.getComments()\n        ])\n            .then(([tasks, comments]) => {\n                setTasks(tasks)\n                setComments(comments)\n                setIsInitialized(true);\n            });\n    }, [])\n\n    return isInitialized ? <App comments={comments} tasks={tasks}/> : <span>Loading...</span>\n}\n\n\nfunction App(props: AppPropsType) {\n    const [state, dispatch] = useReducer(stateReducer, getInitialState(props.tasks, props.comments))\n    const {comments, tasks, selectedTaskId} = state;\n    const selectedComments = selectedTaskId ? comments[selectedTaskId] : []\n\n    useEffect(() => {\n        repository.saveTasks(state.tasks);\n        repository.saveComments(comments);\n    }, [tasks, comments])\n\n    const removeTask = useCallback((id: string) => dispatch(removeTaskAC(id)), []);\n    const addTask = useCallback((title: string) => dispatch(addTaskAC(title)), []);\n    const addComment = useCallback((taskId: string,\n                                    commentText: string,\n                                    color: string = '#000') => dispatch(addCommentAC(taskId, commentText, color)), []);\n\n    const showCommentsOfTask = useCallback((id: string) => dispatch(setSelectedTask(id)), []);\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\">\n                        To do list\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <div className='container'>\n                <Container maxWidth=\"lg\">\n                    <Grid item>\n                        <Paper style={columnPaperStyle}>\n                            <h3>Tasks</h3>\n                            <Todolist\n                                comments={comments}\n                                selectedTaskId={selectedTaskId}\n                                tasks={tasks}\n                                removeTask={removeTask}\n                                addTask={addTask}\n                                showCommentsOfTask={showCommentsOfTask}\n                            />\n                        </Paper>\n                    </Grid>\n                </Container>\n                <Container maxWidth=\"lg\">\n                    <Grid item>\n                        <Paper style={columnPaperStyle}>\n                            <h3>Comments for tasks</h3>\n                            {\n                                state.selectedTaskId && <div>\n                                    <div>Comments {selectedTaskId}</div>\n                                    <Comments taskId={selectedTaskId}\n                                              comments={selectedComments}\n                                              addComment={addComment}/>\n                                </div>\n                            }\n                        </Paper>\n                    </Grid>\n                </Container>\n            </div>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  {RestoreAppContainer} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RestoreAppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}